# -*- coding: utf-8 -*-
"""seir-hcd simulations

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lNl89oC7eIcJoJhg_JtiL6NqKooBrCic
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os , json , random
from datetime import date

from sklearn.externals import joblib
from simulations import simulate, simulate_constantRt

#plt.style.use('seaborn')

country_name = "Luxembourg"
SEED = random.randint(0,1000)
current_dataset_date = date(2020,5,10).strftime("%Y_%m_%d")
current_dataset_date = "v2_1"

folder = "./models/seirhcd/{}".format(current_dataset_date)
scaler = joblib.load("{}/scaler.save".format(folder)) 
mlp_clf = joblib.load("{}/mlp.save".format(folder)) 
merged = pd.read_csv("{}/features.csv".format(folder), parse_dates=["Date"])
with open('{}/metrics.json'.format(folder)) as fp:
    metrics = json.load(fp)
    yvar = np.power(metrics["std_test"],0.5)
    columns = metrics["columns"]
    #{"perf":reports,"std_test":list(ystd.values), "columns":columns}

"""## Simulations"""

def corr_matrix(countries, country):
    df = countries[countries["CountryName"] == country] if country is not None else countries
    #[        ['retail/recreation', 'grocery/pharmacy', 'parks', 'transit_stations',         'workplace', 'residential']]
    features = countries.columns.values[18:-7]

    print(df.columns)
    for e in features[:5]:
        df.plot(x="R", y=e)
    plt.show()
    df = df.loc[:,features]
    return

    print(df.describe())
    #print(df.head(1))
    f = plt.figure(figsize=(19, 15))
    plt.matshow(df.corr(), fignum=f.number)
    plt.xticks(range(df.shape[1]), df.columns, fontsize=14, rotation=45)
    plt.yticks(range(df.shape[1]), df.columns, fontsize=14)
    cb = plt.colorbar()
    cb.ax.tick_params(labelsize=14)
    # plt.title('Correlation Matrix', fontsize=16);

    plt.show()



if __name__ == '__main__':

    corr_matrix(merged, "Belgium")
    corr_matrix(merged, "France")
    #exit()

    lift_date = pd.to_datetime("2020-05-01")
    end_date = pd.to_datetime("2020-9-11")
    simulation_id = SEED
    folder = "./plots/simulations/{}/{}/run{}/lift_{}".format(country_name, current_dataset_date, str(simulation_id),
                                                              str(lift_date)[0:10])
    measures_to_lift = [["transit_stations"]]
    measure_values = [-50]

    end_date = pd.to_datetime("2020-04-30")

    eval_date = pd.to_datetime("2020-04-29")
    ref_date = pd.to_datetime("2020-02-15")
    countries = ["Belgium","France"] #,"Germany","Greece","Italy","Latvia","Luxembourg","Netherlands","Spain","Switzerland","Brazil","Cameroon","Canada","Japan","United Kingdom"]

    for country_name in countries:
        country_df = merged[merged["CountryName"]==country_name]
        if country_df.shape[0] ==0:
            continue
        country_sub = country_df[country_df["Date"]<=ref_date]
        if country_sub.shape[0] ==0:
            country_sub = country_df

        measures_to_lift = [["transit_stations", "workplace"]]
        lift_date = pd.to_datetime("2020-05-11")
        end_date = pd.to_datetime("2020-9-11")
        res = simulate(country_df, measures_to_lift, 0, end_date, lift_date, columns, yvar, mlp_clf, scaler,
                 measure_values=measure_values, base_folder=folder, seed="v2")
        # plt.show()

        #res = simulate_constantRt(country_sub, end_date)
        frame = res[res["Date"]==eval_date].to_dict(orient="records")[0]
        print("{} {} {}".format(country_name, frame["Date"],frame["SimulationDeaths"]))

    """
    measures_to_lift = [["transit_stations","workplace"], ["transit_stations","S1_School closing"],["transit_stations","workplace","retail/recreation"],["transit_stations","retail/recreation","S7_International travel controls"]]
    simulate(country_df, measures_to_lift,0,end_date,lift_date,metrics["columns"],yvar, mlp_clf, scaler,base_folder=folder)
    plt.show()

    simulate(country_df, measures_to_lift,-50,end_date,lift_date,metrics["columns"],yvar, mlp_clf, scaler,base_folder=folder)
    simulate(country_df, measures_to_lift,-90,end_date,lift_date,metrics["columns"],yvar, mlp_clf, scaler,base_folder=folder)
    

    measures_to_lift = [["transit_stations","workplace","S1_School closing"]]
    measure_values=[-50,-32,-80]
    lift_date = pd.to_datetime("2020-05-11")
    end_date = pd.to_datetime("2020-9-11")
    simulate(country_df, measures_to_lift,0,end_date,lift_date,columns,yvar, mlp_clf, scaler,measure_values=measure_values,base_folder=folder,seed="LuxScenario")
    #plt.show()
    
    """